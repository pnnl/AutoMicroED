from datetime import datetime as dt
import codecs, os, shutil, subprocess, sys, time
import util


def run_xscale_to_scale_after_xds(mrc_w_path, output_folder_name, args_dict):
  process = "Running xscale after XDS to scale " + str(mrc_w_path)
  util.show_header(process)
  start_time = time.time()
  
  templates_path = args_dict['repo_location'] + "/templates/"
  XSCALE_INP_w_path = os.path.join(templates_path, "XSCALE_template.INP")
  
  shutil.copyfile(XSCALE_INP_w_path, os.path.join(os.getcwd(),"XSCALE_template.INP"))
  
  f_in  = codecs.open("XSCALE_template.INP", 'r')
  new_XSCALE_INP_file_name = "XSCALE.INP"
  f_out = codecs.open(new_XSCALE_INP_file_name, 'w')
  for line in f_in:
    if (line[:12] == "OUTPUT_FILE="):
      write_this = "OUTPUT_FILE=output_" + str(output_folder_name) + ".ahkl\n"
      f_out.write(write_this)
    elif (line[:11] == "INPUT_FILE="):
      write_this = "INPUT_FILE=XDS_ASCII.HKL\n"
      f_out.write(write_this)
    elif (line[:25] == "INCLUDE_RESOLUTION_RANGE="):
      write_this = "INCLUDE_RESOLUTION_RANGE=" + str(args_dict['INCLUDE_RESOLUTION_RANGE']) + " \n"
      f_out.write(write_this)
    else:
      f_out.write(line)
  f_in.close()
  f_out.close()
  
  print_this = "\t(note) xscale to scale this time."
  print_this = print_this + "\t\ninput -> XDS_ASCII.HKL, output -> output_<output_folder_name>.ahkl"
  util.flog(print_this, args_dict['logfile_name_w_abs_path'])
  
  
  command = "xscale "
  #command = "/opt/apps/XDS-INTEL64_Linux_x86_64/xscale "
  util.flog(command, args_dict['logfile_name_w_abs_path']) 
  os.system(command) # xscale takes 0.2 seconds, so no need of job launching

  
  output_filename = "output_" + str(output_folder_name) + ".ahkl"
  if os.path.isfile(output_filename) == False:
    print_this = str(output_filename) + " is not generated by xscale"
    util.flog(print_this, args_dict['logfile_name_w_abs_path'])
    util.flog_wo_print(print_this, args_dict['summary_logfile_name_w_abs_path'])
    return False
  
  end_time = time.time()
  
  write_this = util.show_time(process, start_time, end_time)
  util.flog(write_this, args_dict['logfile_name_w_abs_path'])
  return True
######### end of def run_xscale_to_scale_after_xds(mrc_w_path, output_folder_name)


def run_xscale_to_merge(args_dict):
  process = "xscale to merge (many) HKL data.\n"
  util.show_header(process)
  starting_dir = os.getcwd()
  util.flog(("cwd: " + str(starting_dir)), args_dict['logfile_name_w_abs_path'])
  start_time = time.time()
  
  iterate_this_file = "For_this_SPACE_GROUP_and_UNIT_CELL_merge_these_HKL_by_xscale.txt"
  
  list_f = codecs.open(iterate_this_file, "r")
  cp_this = None
  for line in list_f:
    cp_this = os.path.join("../..", line.rstrip(), "XSCALE.INP")
    break 
  list_f.close()
  
  if (cp_this == None):
    write_this = "There is no XSCALE.INP."
    util.flog(write_this, args_dict['logfile_name_w_abs_path'])
    return False
    
  f_in  = codecs.open(cp_this, 'r')
  f_out = codecs.open("XSCALE.INP", 'w')
  for line in f_in:
    if (line[:11] == "INPUT_FILE="):
      list_f = codecs.open(iterate_this_file, "r")
      for line in list_f:
        use_this_HKL_file = os.path.join("../..", line.rstrip(), "XDS_ASCII.HKL")
        write_this = "INPUT_FILE=" + str(use_this_HKL_file) + "\n"
        f_out.write(write_this)
      list_f.close()
    elif (line[:12] == "OUTPUT_FILE="):
      write_this = "OUTPUT_FILE=XDS_ASCII_merged.hkl\n"
      f_out.write(write_this)
    elif (line[:25] == "INCLUDE_RESOLUTION_RANGE="):
      write_this = "INCLUDE_RESOLUTION_RANGE=" + str(args_dict['INCLUDE_RESOLUTION_RANGE']) + " \n"
      f_out.write(write_this)
    else:
      f_out.write(line)
  f_in.close()
  f_out.close()

  print_this = "\t(note) xscale to merge many XDS_ASCII.HKL"
  print_this = print_this + "\tSince it is xscale, it should be fast, so no need of job launch."
  print_this = print_this + "\tinput -> XDS_ASCII.HKL in many folders, output -> XDS_ASCII_merged.hkl, process log -> XSCALE.LP"
  util.flog(print_this, args_dict['logfile_name_w_abs_path'])
  
  command = ("xscale") # All users need to specify XDS/XSCALE in .bashrc's PATH
  #command = ("/opt/apps/XDS-INTEL64_Linux_x86_64/xscale") # All users need to specify XDS/XSCALE in .bashrc's PATH
  util.flog(command, args_dict['logfile_name_w_abs_path'])
  os.system(command)
  
  if os.path.isfile("XDS_ASCII_merged.hkl") == False:
    util.flog("XDS_ASCII_merged is not generated by xscale", args_dict['logfile_name_w_abs_path'])
    util.flog_wo_print("not print anyway", args_dict['summary_logfile_name_w_abs_path'])
    return False
  
  os.chdir(starting_dir)
  
  end_time = time.time()
  
  write_this = util.show_time(process, start_time, end_time)
  util.flog(write_this, args_dict['logfile_name_w_abs_path'])
  return True
#################### end of def run_xscale_to_merge(logfile_name_w_abs_path)
